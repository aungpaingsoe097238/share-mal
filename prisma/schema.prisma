// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  email     String   @unique
  name      String   @unique
  password  String
  role      Role     @default(USER)
  posts     Post[]
  profile   Profile?
  createdAt DateTime @default(now())
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bio       String?
  dob       String?
  phone     String?
  image     String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
}

model Post {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  slug      String          @unique
  title     String
  content   String?
  published PublishedStatus @default(PUBLISHED)
  author    User            @relation(fields: [authorId], references: [id])
  authorId  String          @db.ObjectId
  topics    PostTopic[]
  createdAt DateTime        @default(now())
}

model Topic {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  posts     PostTopic[]
  parentId  String?  @db.ObjectId
  parent    Topic?   @relation("ParentTopic", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Topic[]  @relation("ParentTopic")
  createdAt DateTime @default(now())
}

model PostTopic {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  postId  String  @db.ObjectId
  post    Post    @relation(fields: [postId], references: [id])
  topicId String  @db.ObjectId
  topic   Topic   @relation(fields: [topicId], references: [id])
}

enum PublishedStatus {
  PUBLISHED
  NOT_PUBLISHED
}

enum Role {
  USER
  ADMIN
}
